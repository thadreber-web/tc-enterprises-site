---
layout: base.njk
title: Admin
---

<h1>Admin — Drafts & Proofs</h1>
<p>This is a simple admin UI for reviewing drafts and writing proofs. It requires `ADMIN_SECRET` to be set in your environment and sent as `X-Admin-Secret` header in API requests.</p>

<div id="app">
  <h2>Drafts</h2>
  <div id="draft-list">Loading…</div>

  <template id="draft-template">
    <div class="draft">
      <h3 class="title"></h3>
      <textarea class="proof" rows="8" cols="80"></textarea>
      <div>
        <button class="save-proof">Save Proof</button>
        <button class="publish">Prepare Publish PR</button>
      </div>
    </div>
  </template>
</div>

<script>
(async function(){
  const secret = prompt('Enter admin secret');
  if (!secret) { document.getElementById('draft-list').textContent = 'Admin secret required'; return; }
  const hdr = { 'X-Admin-Secret': secret, 'Content-Type': 'application/json' };

  async function load() {
    const res = await fetch('/api/admin?action=list', { headers: hdr });
    const json = await res.json();
    const list = document.getElementById('draft-list');
    list.innerHTML = '';
    if (!json.ok) { list.textContent = json.error || 'Error'; return; }
    json.drafts.forEach(d => {
      const tpl = document.getElementById('draft-template');
      const node = tpl.content.cloneNode(true);
      node.querySelector('.title').textContent = d.file;
      node.querySelector('.proof').value = d.proof || '';
      node.querySelector('.save-proof').addEventListener('click', async () => {
        const proof = node.querySelector('.proof').value;
        await fetch('/api/admin?action=save-proof', { method: 'POST', headers: hdr, body: JSON.stringify({ file: d.file, proof }) });
        alert('Proof saved');
      });
      node.querySelector('.publish').addEventListener('click', async () => {
        if (!confirm('Prepare publish PR for ' + d.file + '?')) return;
        const resp = await fetch('/api/admin?action=publish', { method: 'POST', headers: hdr, body: JSON.stringify({ files: [d.file] }) });
        const resj = await resp.json();
        if (resj.ok) {
          alert('Publish PR created: ' + resj.prUrl);
        } else alert('Error: ' + (resj.error||JSON.stringify(resj)));
      });
      list.appendChild(node);
    });
  }

  load();
})();
</script>