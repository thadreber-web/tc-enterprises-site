name: Auto Blog Draft
on:
  schedule:
    - cron: "0 9 * * 0"   # Sundays 2am PT (9am UTC)
  workflow_dispatch: {}

jobs:
  draft:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      LLM_API_URL: ${{ secrets.LLM_API_URL }}
      LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Gather context
        run: |
          mkdir -p .autoblog
          # Repo knowledge (limit per-file length to keep prompt bounded)
          if [ -d knowledge ]; then
            for f in $(find knowledge -type f -maxdepth 2); do
              echo "### FILE: $f" >> .autoblog/context.md
              echo >> .autoblog/context.md
              sed -n '1,200p' "$f" >> .autoblog/context.md
              echo >> .autoblog/context.md
            done
          fi
          # Recent commits (last 14 days)
          echo "### RECENT COMMITS" >> .autoblog/context.md
          git log --since="14 days ago" --pretty=format:"- %s" >> .autoblog/context.md || true
          # Ideas
          if [ -f ideas.md ]; then
            echo >> .autoblog/context.md
            echo "### IDEAS" >> .autoblog/context.md
            cat ideas.md >> .autoblog/context.md
          fi

      - name: Create prompt
        run: |
          cat > .autoblog/prompt.txt <<'PROMPT'
You are a content writer for T & C Enterprises.
Tone: confident, approachable, solution-focused. Avoid jargon. Keep headlines punchy. Use US spelling.

Write ONE original blog post in Markdown with this STRICT structure:

1) YAML frontmatter:
---
title: "<catchy, truthful>"
date: "<YYYY-MM-DD>"
category: "<Engraving|SaaS|Real Estate|Crafts|Automation|General>"
excerpt: "<<=120 chars compelling summary>"
---

2) Body (900–1200 words). Include:
- Clear intro and skimmable H2s
- 2–3 internal links to /services, /portfolio, or /blog (use relative paths)
- If referencing external facts, paraphrase and include a link (no quotes)

3) End with:
- "—"
- Social blurb (<= 140 chars, compelling)

4) Add a "Claims checklist" section for the human editor (bulleted facts to verify).

Source material follows. Only use it for ideas—DO NOT copy text. Summarize and keep it original.
PROMPT
          echo >> .autoblog/prompt.txt
          sed -n '1,4000p' .autoblog/context.md >> .autoblog/prompt.txt

      - name: Draft with LLM
        id: draft
        run: |
          python - <<'PY'
import os, json, datetime, re, pathlib, sys, textwrap, urllib.request

prompt = pathlib.Path(".autoblog/prompt.txt").read_text(encoding="utf-8")
url = os.environ.get("LLM_API_URL")
key = os.environ.get("LLM_API_KEY")
if not url or not key:
    print("LLM_API_URL and LLM_API_KEY must be set as repo secrets.", file=sys.stderr)
    sys.exit(1)

# Example generic request; adapt to your provider schema if different
data = json.dumps({"input": prompt, "max_tokens": 2200}).encode("utf-8")
req = urllib.request.Request(url, data=data, method="POST")
req.add_header("Authorization", f"Bearer {key}")
req.add_header("Content-Type", "application/json")

with urllib.request.urlopen(req, timeout=120) as resp:
    raw = resp.read().decode("utf-8")

# Try common JSON fields; fallback to raw
try:
    obj = json.loads(raw)
    text = obj.get("output") or obj.get("choices",[{}])[0].get("text") or raw
except Exception:
    text = raw

# Ensure frontmatter title/date exist
m = re.search(r'^---\s*\ntitle:\s*"?(.*?)"?\n.*?date:\s*"(.*?)"', text, re.S)
title = m.group(1) if m else f"Auto Post {datetime.date.today()}"
date = m.group(2) if m else str(datetime.date.today())

slug = re.sub(r'[^a-z0-9]+','-', title.lower()).strip('-')
fname = f"content/blog/{date}-{slug}.md"

pathlib.Path("content/blog").mkdir(parents=True, exist_ok=True)
pathlib.Path(fname).write_text(text.strip() + "\n", encoding="utf-8")

print(f"file={fname}")
PY

      - name: Save output variable
        id: savefile
        run: |
          # Read file path from previous step stdout
          FILE=$(tail -n 1 $GITHUB_STEP_SUMMARY 2>/dev/null | sed 's/.*file=//') || true
          # Fallback: search for newest file in content/blog
          if [ -z "$FILE" ]; then
            FILE=$(ls -t content/blog/*.md | head -n1)
          fi
          echo "FILE=$FILE" >> $GITHUB_OUTPUT

      - name: Commit branch & open draft PR
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(blog): auto-draft ${{ steps.savefile.outputs.FILE }}"
          title: "Weekly Blog Draft"
          body: "AI-drafted post from repo knowledge. Please review, edit, and merge to publish."
          branch: "blog-draft-${{ github.run_id }}"
          base: "main"
          labels: "blog-draft"
          draft: true